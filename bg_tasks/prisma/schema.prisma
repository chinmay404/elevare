generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                   String      @id @map("_id")
  emailAddress         String      @unique
  emails               Emails[]
  profileUrl           String
  userName             String
  refreshToken         String
  lastFetchdTimeStamp  String?
  emailsCnt            Int?
  revokedAccess        Boolean     @default(false)
  underProcessEmailIds String[]
  categories           String[]
  files                UserFiles[]
  analytics            Analytics[]
  Threads              Threads[]

  joinedDate DateTime @default(now())
}

model Emails {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  emailId          String
  threadId         String?
  contentType      String?
  shortSummary     String?
  longSummary      String?
  sentiment        String?
  tone             String?
  cc               String?
  bcc              String?
  date             DateTime?
  from             String?
  subject          String?
  label            String[]
  category         String?
  userEmailAddress String

  replies ReplyMails[]
  user    Users        @relation(fields: [userEmailAddress], references: [emailAddress])

  @@unique([userEmailAddress, emailId])
}

model Threads {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  threadId           String @unique
  threadSummery      String
  threadMailCount    Int
  latestThreadMailId String
  userEmailAddress   String
  user               Users  @relation(fields: [userEmailAddress], references: [emailAddress])
}

model ReplyMails {
  id                 String   @id @default(uuid()) @map("_id") //this is id of newly generated mail
  replyMailId        String?
  threadId           String?
  idOfOriginalMail   String
  generatedSubject   String?
  generatedResponse  String
  generatedTimeStamp String?
  userEmailAddress   String
  to                 String? //sender in our ReplyEmailFormat type
  cc                 String?
  bcc                String?
  labels             String[]
  category           String?
  emails             Emails   @relation(fields: [idOfOriginalMail, userEmailAddress], references: [emailId, userEmailAddress])
  userFilesId        String?
}

model UserFiles {
  id           String   @id @default(uuid()) @map("_id")
  fileName     String
  fileType     String
  filePath     String
  uploadedAt   DateTime @default(now())
  emailAddress String
  user         Users    @relation(fields: [emailAddress], references: [emailAddress])

  // user             Users        @relation(fields: [userEmailAddress], references: [emailAddress])
}

model Notifications {
  id               String   @id @default(uuid()) @map("_id")
  title            String
  description      String
  isRead           Boolean
  userEmailAddress String
  date             DateTime @default(now())
}

//add new label model and add to analytics
model Analytics {
  id                         String @id @default(uuid()) @map("_id")
  userEmailAddress           String @unique
  totalSummerized            Int
  totalGenerated             Int?
  totalSent                  Int?
  dailySummeryCount          Int?
  dailyGeneratedCount        Int?
  dailySentCount             Int?
  // totalThreadsSummerized Int?
  totalThreadsGeneratedReply Int?
  user                       Users  @relation(fields: [userEmailAddress], references: [emailAddress])
}
